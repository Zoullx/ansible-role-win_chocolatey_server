---
- name: install with the defaults
  hosts: windows
  gather_facts: no
  roles:
  - ../..
  - ../..  # test idempotency

  post_tasks:
  - name: check if site existsi
    win_shell: |
      $site = Get-WebSite -Name chocolatey_server_site
      if ($site) {
          $true
          $site.state
          $site.serverAutoStart
          $site.applicationPool
          $site.physicalPath
          foreach ($binding in $site.bindings.Collection) {
            "$($binding.protocol.ToString()) $($binding.bindingInformation.ToString())"
          }
      } else {
          $false
      }
    register: site
    check_mode: no

  - name: get list of packages that have been installed
    win_find:
      paths: C:\tools\chocolatey.server\App_Data\Packages
      file_type: directory
    ignore_errors: '{{ ansible_check_mode }}'  # folder won't exist in check mode
    register: packages

  - name: get information on web.config file
    win_stat:
      path: C:\tools\chocolatey.server\web.config
    register: web_config

  - name: set expected web.config hash
    set_fact:
      expected_web_config: '{{ lookup("file", "default_web.config")|windows_newlines|hash("sha1") }}'

  - name: check if firewall rules for Chocolatey exists
    win_shell: |
      $fw = New-object -comObject HNetCfg.FwPolicy2
      $rules = $fw.Rules | Where-Object { $_.Name.StartsWith("Chocolatey ") }
      foreach ($rule in $rules) { $rule.Name; $rule.LocalPorts }
    register: firewall_rules
    check_mode: no

  - name: assert results (check mode)
    assert:
      that:
      - site.stdout_lines[0] == "False"
      - packages.files == []
      - web_config.stat.exists == False
      - firewall_rules.stdout_lines == []
    when: ansible_check_mode

  - name: assert results
    assert:
      that:
      - site.stdout_lines|count == 6
      - site.stdout_lines[0] == "True"
      - site.stdout_lines[1] == "Started"
      - site.stdout_lines[2] == "True"
      - site.stdout_lines[3] == "chocolatey_server_app_pool"
      - site.stdout_lines[4] == "C:\\tools\\chocolatey.server"
      - site.stdout_lines[5] == "http *:80:"
      - packages.files == []
      - web_config.stat.checksum == expected_web_config
      - firewall_rules.stdout_lines == ["Chocolatey Server HTTP (In)", "80"]
    when: not ansible_check_mode

- import_playbook: cleanup.yml

- name: install with https, basic auth, api token and chocolatey package
  hosts: windows
  gather_facts: no
  vars:
    opt_chocolatey_server_api_token: test-token
    opt_chocolatey_server_credentials:
      user1: '{{ "pass1"|hash("sha1")|upper }}'
      user2: '{{ "pass2"|hash("sha1")|upper }}'
    opt_chocolatey_server_http_port: 8080
    opt_chocolatey_server_https_port: 8443
    opt_chocolatey_server_max_package_size: 1147483648
    opt_chocolatey_server_path: C:\tools2
    opt_chocolatey_server_chocolatey_url: https://packages.chocolatey.org/chocolatey.0.10.11.nupkg
  roles:
  - ../..
  - ../..  # test idempotency

  post_tasks:
  - name: check if site existsi
    win_shell: |
      $site = Get-WebSite -Name chocolatey_server_site
      if ($site) {
          $true
          $site.state
          $site.serverAutoStart
          $site.applicationPool
          $site.physicalPath
          foreach ($binding in $site.bindings.Collection) {
            "$($binding.protocol.ToString()) $($binding.bindingInformation.ToString())"
          }
      } else {
          $false
      }
    register: site
    check_mode: no

  - name: get list of packages that have been installed
    win_find:
      paths: C:\tools2\chocolatey.server\App_Data\Packages
      file_type: directory
    ignore_errors: '{{ ansible_check_mode }}'  # folder won't exist in check mode
    register: packages

  - name: get information on web.config file
    win_stat:
      path: C:\tools2\chocolatey.server\web.config
    register: web_config

  - name: set expected web.config hash
    set_fact:
      expected_web_config: '{{ lookup("file", "custom_web.config")|windows_newlines|hash("sha1") }}'

  - name: check if firewall rules for Chocolatey exists
    win_shell: |
      $fw = New-object -comObject HNetCfg.FwPolicy2
      $rules = $fw.Rules | Where-Object { $_.Name.StartsWith("Chocolatey ") }
      foreach ($rule in $rules) { $rule.Name; $rule.LocalPorts }
    register: firewall_rules
    check_mode: no

  - name: assert results (check mode)
    assert:
      that:
      - site.stdout_lines[0] == "False"
      - packages.files == []
      - web_config.stat.exists == False
      - firewall_rules.stdout_lines == []
    when: ansible_check_mode

  - name: assert results
    assert:
      that:
      - site.stdout_lines|count == 7
      - site.stdout_lines[0] == "True"
      - site.stdout_lines[1] == "Started"
      - site.stdout_lines[2] == "True"
      - site.stdout_lines[3] == "chocolatey_server_app_pool"
      - site.stdout_lines[4] == "C:\\tools2\\chocolatey.server"
      - site.stdout_lines[5] == "http *:8080:"
      - site.stdout_lines[6] == "https *:8443:"
      - packages.files|count == 1
      - packages.files[0].filename == "chocolatey"
      - web_config.stat.checksum == expected_web_config
      - firewall_rules.stdout_lines == ["Chocolatey Server HTTPS (In)", "8443", "Chocolatey Server HTTP (In)", "8080"]
    when: not ansible_check_mode
